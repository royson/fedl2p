server:
  class: src.server.Server
  client_manager:
    class: src.server.client_managers.SimpleClientManager
  strategy:
    class: src.server.strategies.FedAvg
    args:
      min_fit_clients: 100 # clients_per_round
      log: False
    valuation: null
models:
  net:
    args:
      norm_layer: src.models.model_utils.KLDBatchNorm2d
  bn_net:
    class: src.models.BNNet
    mode: 'layerwise'
    args: {}
    optimizer:
      class: torch.optim.SGD
      args: {}
    init:
      gain_init: 0.1
      bias_init: 0.5
  lr_net:
    class: src.models.ClampLRNet
    mode: 'layerwise'
    args: 
      max_limit: 1000.0
    optimizer:
      class: torch.optim.SGD
      args: {}
    init:
      gain_init: 0.1
      bias_init: 1.0
app:
  class: src.apps.FedL2PClassificationApp
  args:
    federated_learning: true
    patience: 50
  run:
    num_rounds: 500
    test_every_n: null
  on_evaluate:
    freeze_bn_buffer: False
    eval_epochs: [15]
    finetune_epochs: [15]
    lr: 0.001
  on_fit:
    split_train: False
    start_inner_lr: 0.001
    inner_lr_decay:
      steps: [] 
      factors: []
    start_bn_net_lr: 0.001 
    bn_net_lr_decay: null
    start_mask_net_lr: 0.001 
    mask_net_lr_decay: null
    start_lr_net_lr: 0.001
    lr_net_lr_decay: null
    start_stop_net_lr: 0.001
    stop_net_lr_decay: null
  client:
    class: src.apps.clients.FedL2PClassificationClient
    args: 
      batch_size: 32
      outer_loop_epochs: 3
      inner_loop_epochs: 15
      meta_algorithm: 'IFT'
      augment_validation: False
      clamp_outer_gradients: 1.
      meta_nets_rounds: # no. of rounds to train each meta_net
        bn_net: 500
        lr_net: 500
      learnable_lrs: True
      hypergrad: 
        class: src.apps.clients.client_utils.Hypergrad
        args:
          learning_rate: 0.1
          truncate_iter: 3
wandb_args:
  project: 'fedl2p'
  group: 'cifar10_fedl2p' 
vram: 3500

